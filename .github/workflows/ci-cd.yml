name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run formatting check
      run: npm run format
      
    - name: Run linting
      run: npm run lint
      
    - name: Run tests
      run: npm test
      env:
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
      
    - name: Test completed
      run: echo "Test stage completed successfully"

  deploy_production:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        echo "SSH_PRIVATE_KEY length: ${#SSH_PRIVATE_KEY}"
        echo "Production host: ${{ secrets.PRODUCTION_HOST }}"
        
    - name: Add SSH key
      run: |
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
    - name: Configure SSH
      run: |
        echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
        chmod 600 ~/.ssh/config
        
    - name: Test SSH connection
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no root@${{ secrets.PRODUCTION_HOST }} "echo 'SSH connection test'" || echo "SSH connection failed"
      
    - name: Clean Docker system
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no root@${{ secrets.PRODUCTION_HOST }} "cd /home/CashTrack && docker system prune -af || true"
        
    - name: Deploy to production
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no root@${{ secrets.PRODUCTION_HOST }} "cd /home/CashTrack && git pull origin main && docker-compose -f docker-compose.production.yml down && docker-compose -f docker-compose.production.yml up --build -d"